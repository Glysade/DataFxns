id: ad0d4d93-1845-04ef-a955-dbe63966447d
name: ToSmiles
description: Converts a structure column to SMILES
category: Chemistry
version: 1.0.0
serviceName: Script
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    filters:
    - dataType: string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
      - chemical/x-cdxml
      - chemical/x-cdx
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-cdx
      - chemical/x-chemdraw-cdx
    validationRules:
    - type: required
      message: Must select structure column
  request:
    id: structureColumn
    dataType: string
    selectorType: column
tags:
- color: '#50AF28'
  text: chemistry
- color: '#e2f062'
  text: tform
updateBehavior: automatic
maximumOutputColumns: !!int 1
maximumOutputTables: !!int 0
chemistryFunction: !!bool false
script: |
  from df.chem_helper import column_to_molecules, molecules_to_column
  from df.data_transfer import DataFunctionRequest, DataFunctionResponse, DataType, string_input_field


  def execute(request: DataFunctionRequest) -> DataFunctionResponse:
      column_id = string_input_field(request, 'structureColumn')
      input_column = request.inputColumns[column_id]
      mols = column_to_molecules(input_column)
      output_column = molecules_to_column(mols,'SMILES',DataType.STRING, content_type='chemical/x-smiles')
      response = DataFunctionResponse(outputColumns=[output_column])
      return response
outputFields:
- id: structureColumn
  source: inputField
  type: default
  name: Structure column
- id: column1
  source: column
  type: default
  name: Output SMILES column
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: none

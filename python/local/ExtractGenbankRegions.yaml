id: fa95f9fa-27b8-67cc-9b3d-583f7ee9c82f
name: Extract Genbank Regions
description: Extracts all regions matching a feature key and qualifier from a column of Genbank sequences into new columns or a new table.
category: Biopolymer
version: 1.1.0
serviceName: ExtractGenbankRegions
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: sequenceColumn
    label: Select sequence column
    type: columnselect
    filters:
    - dataType:
      - binary
      contentType: chemical/x-genbank
    validationRules:
    - type: required
  request:
    id: sequenceColumn
    dataType: string
    selectorType: column
- control:
    id: uiIDColumn
    label: Select Unique ID column
    type: columnselect
    multi: !!bool false
    tooltip: Select a column with unique IDs for each row.
  request:
    id: uiIDColumn
    dataType: string
    selectorType: column
- control:
    id: featureKey
    label: Feature key
    type: text
    tooltip: Regions with this feature key will be extracted into new columns
    validationRules:
    - type: required
      message: ''
  request:
    id: featureKey
    dataType: string
    data: region
- control:
    id: featureQualifier
    label: Feature qualifier (optional)
    type: text
    tooltip: The qualifier whose value will be used as the region name
    validationRules: []
  request:
    id: featureQualifier
    dataType: string
    data: region_name
- control:
    id: uiOutputOption
    label: Output column options
    type: radiogroup
    radios:
    - text: Sequence columns
      value: OutputSequence
    - text: Genbank columns
      value: OutputGenbank
    - text: 'Both '
      value: OutputBoth
    tooltip: Select what types of columns are created
  request:
    id: uiOutputOption
    dataType: string
    data: Sequences
- control:
    id: maximumNumberRegions
    label: Maximum number of regions
    type: text
    validationRules:
    - type: required
      message: ''
    - type: numeric
      message: ''
    - type: range
      message: ''
      max: !!int 100
  request:
    id: maximumNumberRegions
    dataType: integer
    data: !!int 25
tags:
- color: '#337abc'
  text: sequence
- color: '#e2f062'
  text: tform
ironPython: |
  ####################################################
  #  Copyright 2024 Glysade LLC, All Rights Reserved #
  ####################################################

  import sys,clr
  from Spotfire.Dxp.Data import DataTable, DataManager
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel
  model_type = ChartsModel

  #tableId pass in args
  dataTable = ResultTables[0]

  if not dataTable:
      raise Exception('target table not found')

  page = Document.Pages.AddNew('Extract Genbank Regions Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False

  filteringScheme = Document.FilteringSchemes[0]
  page.FilterPanel.FilteringSchemeReference = filteringScheme

  tableVis = page.Visuals.AddNew[model_type]()
  tableVis.SetKeyValue('visualization','table-visualization')
  tableVis.DataTable = dataTable
  tableVis.ConfigureColumns()
  tableVis.Marking = Document.Data.Markings.DefaultMarkingReference

  tableVis.SetActiveVisual()
  page.AutoConfigure()
updateBehavior: automatic
maximumOutputColumns: !!int 100
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: none
minimumChartsVersion: 
confirmSubmit: 
